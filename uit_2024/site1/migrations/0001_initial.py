# Generated by Django 5.1 on 2024-09-03 10:27

import django.db.models.deletion
import django.utils.timezone
import site1.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id_user', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('age', models.IntegerField(default=0)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['username'],
            },
            managers=[
                ('objects', site1.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id_room', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('equipment', models.CharField(blank=True, default='No Data', max_length=255, null=True)),
                ('is_practice', models.BooleanField(default=False)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Scheduler_Room',
            fields=[
                ('id_scheduler_room', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Scheduler_Subject',
            fields=[
                ('id_scheduler_subject', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Teacher_Free_Time',
            fields=[
                ('id_teacher_free_time', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('time', models.TimeField(default=site1.models.get_current_time)),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Teacher_Subject',
            fields=[
                ('id_teacher_subject', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Scheduler',
            fields=[
                ('id_scheduler', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('time', models.TimeField(default=site1.models.get_current_time)),
                ('scheduler_room', models.ManyToManyField(blank=True, to='site1.scheduler_room')),
                ('scheduler_subject', models.ManyToManyField(blank=True, to='site1.scheduler_subject')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id_subject', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('practice', models.IntegerField(default=0)),
                ('theory', models.IntegerField(default=0)),
                ('is_complete', models.BooleanField(default=False)),
                ('scheduler_subject', models.ManyToManyField(blank=True, to='site1.scheduler_subject')),
                ('study_resolutely', models.ManyToManyField(blank=True, related_name='Subject_study_resolutely', to='site1.subject')),
                ('teacher_subject', models.ManyToManyField(blank=True, to='site1.teacher_subject')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('role', models.IntegerField(default=1)),
                ('department', models.CharField(blank=True, default='No Data', max_length=255, null=True)),
                ('scheduler', models.ManyToManyField(blank=True, to='site1.scheduler')),
                ('teacher_free_time', models.ManyToManyField(blank=True, to='site1.teacher_free_time')),
                ('teacher_subject', models.ManyToManyField(blank=True, to='site1.teacher_subject')),
            ],
            options={
                'ordering': ['department'],
            },
        ),
    ]
